# Building a theme for engine4 

If you like repeating the same blocks of code over and over again, and then maintaining those same
blocks of code over and over again, engine4 doesn't *need* a theme, and you can go now.

Still here? OK, good. I'm glad those other guys are gone. They were *weird* (or COBOL developers, maybe).

Anyway, hopefully by now you've latched onto the idea of creating a HTML template and using that
to output the content from your engine4 `content` directory, rather than putting HTML into your content or (egads)
putting up with the basic (and incorrect from a HTML viewpoint) default rendering.

That's what the `theme` directory is for.

engine4 will process your `theme/` subdirectory in the same way that it processes `content/`. 
The key difference is that theme gets processed *after* content (because, alphabetically, it comes later)
and in your theme directory we are going to put some `.php` files.

These .php files are going to print stuff out, which engine4 will notice. 
When engine4 notices that something has been printed out, it won't attempt any other output itself.

## How to build the most basic of themes with engine4

1. Create a `theme` directory
1. Create an `index.php` file in that directory
1. In the index.php file, put the following code
    `<?php print $this->content->html; ?>`
1. Save the file and view your content again

Nothing special, right? In fact... nothing has changed. And nothing will until you start
to do some more exciting stuff in that index.php file.

Something like ...

`<html>
    <head>
        <title>My new enginge4 website</title>
    </head>
    <body>
        <h1>Welcome to my website</h1>
        <?php print $this->content->html; ?>
    </body>
</html>`

Now all of your pages have a title and a nice `<h1>` heading tag.

You can add any amount of content around the output from your content folder, 
and this technique forms the basis for all engine4 themes.

## Frequently Asked Questions

### Why `$this->content->html`?

**$this** is because the rendering of the theme, e.g. the running of the .php code, happens
inside the context of an instance of the class `e` that loads of all the content. 

*Everything* that happens in engine4 happens inside this object. The only time that $this
will point anywhere else is if you are running some code (for example in a theme) that happens
to create an instance of another class.

**content** is named after the content directory. If you renamed your content directory to `stuff/` 
then the appropriate code would be `$this->stuff->html`.

engine4 *does not* care what you call your directories. The names only matter in the context of
*readability* (so don't call your most important directory `temp`!) and in terms of process flow 
(e.g. `zebras` comes after `theme`, so don't create a `zebras` directory in the root. Unless you need one...)

**html** is the default property that should be populated for every folder that we load 
(e.g. content is a folder and so it is loaded into `$this->content`). 

.txt files are translated into HTML and the result put into the HTML property. 
The original text, should you ever want it, is in `$this->content->txt`.

If you create a filetype that engine4 does not know how to handle (for example, a .foo file) then
engine4 will attempt to load the file *if* is is a text/ASCII file. If so, you will find the result in
`$this->content->foo`.

If you are thinking "*hey, I could **do** something with that*", then you are ready to go and hit
the advanced documentation. If not, don't worry. Call your folder content, call your content files .txt
and you will be *golden*.